mod$model
x <- design[,(colnames(mod$model) %in% c(X))]
x
hatz <-lapply(f_quant_list, function(w) design_h0%*%solve(t(design_h0)%*%diag(w)%*%design_h0)%*%t(design_h0)%*%diag(w)%*%x)
a <- lapply(taus, function(w) ranks(rq(formula, tau=-1, data = mod$model), score="tau", tau=w))
n <- nrow(design)
s <- mapply(function(w, u) n^(-0.5)*t(x-w)%*%(u$ranks), hatz, a, SIMPLIFY = FALSE)
Htaz <- do.call(cbind, hatz)
Htaz
S <- unlist(s)
Z<-matrix(rep(x,length(taus)),n,length(taus))
Z
M<-t(Z-Htaz)%*%(Z-Htaz)/n
ff<-Vectorize(function(x,y) {min(x,y)*(1-max(x,y))})
M2<-outer(taus,taus,FUN=ff)
M<-M*M2
roxygen2::roxygenize()
roxygen2::roxygenize()
tau=c(0.1, 0.2)
x<-sample(LETTERS[1:2], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res
res <- waldTest(mod = mod,  X = "x")
res
assert_binary_categorical_X(mod, X)
if(is.null(tau)){
tau <- mod$tau
}
if(sum(!(tau %in% mod$tau))!=0){
stop("The quantiles specified are not the ones used in the quantile regression. Please specify a vector of proper quantiles.")
}
taus <- mod$tau
taus
coefest <- mod$coefficients[rownames(mod$coefficients) %in% X,]
coefest
mod$coefficients
rownames(mod$coefficients) %in% X
mod$coefficients
mod$coefficients
tau=c(0.1)
mod <- rq(y ~ x + z, tau = tau)
mod$coefficients
mod$model
library(quantreg)
library(quasar)
tau=c(0.1)
x<-sample(LETTERS[1:2], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res
res <- waldTest(mod = mod,  X = "x")
res
tau=c(0.1, 0.2)
x<-sample(LETTERS[1:2], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res
res <- waldTest(mod = mod,  X = "x")
res <- waldTest(mod = mod,  X = "x")
mod <- rq(y ~ x + z, tau = tau)
res <- waldTest(mod = mod,  X = "x")
mod
rownames(mod$model)
mod$model
ames(mod$model)
names(mod$model)
mod$coefficients
names(mod$model) %in% X
roxygen2::roxygenize()
roxygen2::roxygenize()
library(quantreg)
library(quasar)
tau=c(0.1, 0.2)
x<-sample(LETTERS[1:2], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res <- waldTest(mod = mod,  X = "x")
res
x<-sample(LETTERS[1:3], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res <- waldTest(mod = mod,  X = "x")
x<-sample(LETTERS[1:2], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res <- waldTest(mod = mod,  X = "x")
closedTesting(mod, X = "x")
mod
tau
is.null(tau)
tau <- mod$tau
if(sum(!(tau %in% mod$tau))!=0){
stop("The quantiles specified are not the ones used in the quantile regression. Please specify a vector of proper quantiles.")
}
parse_set <- function(s) {
s <- gsub("[()\\s]", "", as.character(s))
as.numeric(strsplit(s, ",")[[1]])
}
res <- rankTest(mod = mod, X = X, tau = mod$tau, full = TRUE)
out <- data.frame(p.value.adjusted = NA,
quantiles.set = NA)
quantiles_single <- as.character(mod$tau)
quantiles_single
i = 1
idx <- vapply(res$Quantiles.Set, function(s) {
vals <- parse_set(s)
all(quantiles_single[i] %in% vals)
}, logical(1))
res_sub <- res[idx, ]
out[i,] <- c(max(res_sub$p.value),
quantiles_single[i])
for(i in seq(length(quantiles_single))){
idx <- vapply(res$Quantiles.Set, function(s) {
vals <- parse_set(s)
all(quantiles_single[i] %in% vals)
}, logical(1))
res_sub <- res[idx, ]
out[i,] <- c(max(res_sub$p.value),
quantiles_single[i])
}
length(mod$tau)==1
out$quantiles.set
roxygen2::roxygenize()
roxygen2::roxygenize()
library(quantreg)
library(quasar)
tau=c(0.1, 0.2)
x<-sample(LETTERS[1:2], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res <- waldTest(mod = mod,  X = "x")
closedTesting(mod, X = "x")
x<-sample(LETTERS[1:3], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
closedTesting(mod, X = "x")
tau=c(0.1)
x<-sample(LETTERS[1:2], 100, replace = TRUE)
z<-rnorm(100)
y<-rnorm(100)
mod <- rq(y ~ x + z, tau = tau)
res <- rankTest(mod = mod,  X = "x")
res <- waldTest(mod = mod,  X = "x")
res
res <- rankTest(mod = mod,  X = "x")
res
closedTesting(mod, X = "x")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
p <- 3; Sigma <- diag(p)
dat_n <- simulateData(200, beta=0, gamma=c(0.2,-0.1), mu=0,
Sigma=Sigma, sigma.y=0.5, distribution="normal")
dat_n <- simulateData(200, beta=0, gamma=c(0.2,-0.1), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="normal")
head(dat_n)
mod <- rq(y ~ x + Z1 + Z2, tau = tau,data = dat_n)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat_n)
tau
mod <- rq(y ~ X + Z1 + Z2, tau = c(0.1, 0.25, 0.5, 0.75, 0.9), data = dat_n)
summary(mod)
closedTesting(mod, X = "x")
closedTesting(mod, X = "X")
dat_n <- simulateData(200, beta=0.5, gamma=c(0.2,-0.1), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="normal")
mod <- rq(y ~ X + Z1 + Z2, tau = c(0.1, 0.25, 0.5, 0.75, 0.9), data = dat_n)
closedTesting(mod, X = "X")
dat_n <- simulateData(200, beta=0.1, gamma=c(0.2,-0.1), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="normal")
mod <- rq(y ~ X + Z1 + Z2, tau = c(0.1, 0.25, 0.5, 0.75, 0.9), data = dat_n)
closedTesting(mod, X = "X")
dat_n <- simulateData(200, beta=0.2, gamma=c(0.2,-0.1), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t")
mod <- rq(y ~ X + Z1 + Z2, tau = c(0.1, 0.25, 0.5, 0.75, 0.9), data = dat_n)
closedTesting(mod, X = "X")
dat_n <- simulateData(200, beta=0, gamma=c(0.2,-0.1), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t")
mod <- rq(y ~ X + Z1 + Z2, tau = c(0.1, 0.25, 0.5, 0.75, 0.9), data = dat_n)
closedTesting(mod, X = "X")
devtools::check()
devtools::check()
x <- c(2.00, 3.00, 4.00, 5.00, 6.00, 7.00, 8.00, 9.00, 10.00)
px <- c(0.08, 0.14, 0.20, 0.25, 0.12, 0.09, 0.06, 0.04, 0.02)
sum(x*px)
sum((x^2)*px)
sum(x*px)^2
28.84 - sum(x*px)^2
x^2
x^2*px
sum(x^2*px)
28.84- 25.2004
x <- c(0.00, 2.00, 3.00, 4.00 ,5.00, 6.00, 7.00, 8.00, 9.00)
px <- c(0.05, 0.22, 0.22, 0.17, 0.1, 0.05, 0.02, 0.01, 0.16)
sum(x*px)
sum(x^2*px)
sum(x^2*px) - 4.24^2
quasar::simulateDate
library(quantreg)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
p <- 3; Sigma <- diag(p)
dat_n <- simulateData(200, beta=0, gamma=c(0.2,-0.1), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t")
head(dat_n)
diag(p)
diag(p)* (-0.5)
diag(p)* (-0.5) + 0.5
diag(p)* (-1.5) + 0.5
diag(p)* (1.5) + 0.5
diag(p)* (-0.5) + 0.5
diag(p)* (-1) + 0.5
diag(p)* (1.5) + 0.5
p <- 3; Sigma <- diag(p)* (1.5) + 0.5
dat_n <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t", df = 4)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
str(dat_n)
tau
mod <- rq(y ~ X + Z1 + Z2, tau = tau)
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t", df = 4)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
closedTesting(mod, X = "X")
summary(mod)
nsim <- 100
p <- 3; Sigma <- diag(p)* (1.5) + 0.5
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t", df = 4)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
library(quantreg)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
out
library(quantreg)
nsim <- 100
p <- 3; Sigma <- diag(p)* (1.5) + 0.5
i = 1
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- c()
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- pv5 <- c()
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
pv5
pv4
pv3
for(i in seq(nsim)){
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
pv1
pv2
simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t",
df = 4, seed = i)
simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t",
df = 4, seed = i)
simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t",
df = 4, seed = 2)
simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t",
df = 4, seed = 4)
library(quantreg)
nsim <- 100
p <- 3; Sigma <- diag(p)* (1.5) + 0.5
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- pv5 <- c()
for(i in seq(nsim)){
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y=0.5, distribution="t",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
pv1
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
pv1
pv2
mean(pv3 <= 0.05)
pv3
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
pv5
nsim <- 1000
p <- 3; Sigma <- diag(p)* (1.5) + 0.5
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- pv5 <- c()
for(i in seq(nsim)){
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="0.5+ 0.3*x", distribution="t",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="0.5+ 0.3*X", distribution="t",
df = 4, seed = i)
for(i in seq(nsim)){
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="0.5+ 0.3*X", distribution="t",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
mean(pv3 <= 0.05)
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
for(i in seq(nsim)){
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="0.5+ 0.3*X", distribution="normal",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
mean(pv3 <= 0.05)
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="1 + 0.3*Z1",
distribution="normal",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
out
for(i in seq(nsim)){
dat <- simulateData(200, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="1 + 0.3*Z1",
distribution="normal",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
mean(pv3 <= 0.05)
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
rho <- 0.4
p <- 3; Sigma <-  (1 - rho) * diag(p) + rho * matrix(1, p, p)
Sigma
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- pv5 <- c()
for(i in seq(nsim)){
dat <- simulateData(100, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="1 + 0.3*Z1",
distribution="normal",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
mean(pv3 <= 0.05)
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
pv1
nsim <- 1000
rho <- 0.4
p <- 3
Sigma <-  (1 - rho) * diag(p) + rho * matrix(1, p, p)
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- pv5 <- c()
for(i in seq(nsim)){
dat <- simulateData(100, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="1 + 0.3*Z1",
distribution="normal",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
mean(pv3 <= 0.05)
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- pv5 <- c()
for(i in seq(nsim)){
dat <- simulateData(100, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="1 + 0.3*X",
distribution="normal",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
mean(pv3 <= 0.05)
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
pv1 <- pv2 <- pv3 <- pv4 <- pv4 <- pv5 <- c()
for(i in seq(nsim)){
dat <- simulateData(100, beta=0, gamma=c(0.2, 0.4), mu=4,
Sigma=Sigma, sigma.y="1 + 0.3*X",
distribution="normal",
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
out <- closedTesting(mod, X = "X")
pv1[i] <- out$p.value.adjusted[1]
pv2[i] <- out$p.value.adjusted[2]
pv3[i] <- out$p.value.adjusted[3]
pv4[i] <- out$p.value.adjusted[4]
pv5[i] <- out$p.value.adjusted[5]
}
mean(pv1 <= 0.05)
mean(pv2 <= 0.05)
mean(pv3 <= 0.05)
mean(pv4 <= 0.05)
mean(pv5 <= 0.05)
library(combinat)
devtools::document()
?combn
R.version
devtools::document()
roxygen2::roxygenise()
