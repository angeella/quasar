res1[i] <-out$p.value.adjusted[1] #no corretti
res2[i] <-out$p.value.adjusted[2]
res3[i] <-out$p.value.adjusted[3]
}
mean(res1 <= 0.05)
mean(res2 <= 0.05)
mean(res3 <= 0.05)
load("C:/Users/Andreella/Documents/Projects/quantileMT/output/sim.RData")
library(tidyverse)
View(sim %>%
group_by(distributions, sigma.y, beta) %>%
summarize(pvC1 = mean(pvC1 <= 0.05),
pvC2 = mean(pvC2 <= 0.05),
pvC3 = mean(pvC3 <= 0.05),
pvC4 = mean(pvC4 <= 0.05),
pvC5 = mean(pvC5 <= 0.05),
pvWB1 = mean(pvWB1 <= 0.05),
pvWB2 = mean(pvWB2 <= 0.05),
pvWB3 = mean(pvWB3 <= 0.05),
pvWB4 = mean(pvWB4 <= 0.05),
pvWB5 = mean(pvWB5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05)))
View(sim %>%
group_by(distributions, sigma.y, beta) %>%
summarize(pvC1 = mean(pvC1 <= 0.05),
pvC2 = mean(pvC2 <= 0.05),
pvC3 = mean(pvC3 <= 0.05),
pvC4 = mean(pvC4 <= 0.05),
pvC5 = mean(pvC5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05)))
devtools::document()
?closedTesting
set.seed(123)
library(quantreg)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
class(res)
plot(res)
summary(res)
?summary.quasar
devtools::document()
?closedTesting
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
res
print(res)
devtools::document()
devtools::document()
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
res
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
devtools::document()
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
res
print(res)
?print.quasar
summary(res)
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
summary(res)
print(res)
res
summary(res)
s <- summary(res)
s
devtools::document()
devtools::document()
?`quasar-methods`
devtools::document()
?`quasar-methods`
devtools::document()
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
summary(res)
alpha=0.05
n1 = 5
n = 10
cat("Significant quantiles (significance level ",
alpha, "): ", n1, " over ", n, "\n\n", sep = "")
cat("Significant quantiles (level ",
alpha, "): ", n1, " over ", n, "\n\n", sep = "")
devtools::document()
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
res
print(res)
summary(res)
devtools::document()
set.seed(123)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# signal on x to make the example informative
y <- 0.5 * x + 0.2 * z + rnorm(n)
mod <- rq(y ~ x + z, tau = tau)
res <- closedTesting(mod, X = "x")
summary(res)
summary(res, alpha=0.1)
res
devtools::document()
?`quasar-methods`
devtools::document()
?`quasar-methods`
devtools::document()
?closedTesting
?simulateData
?sumSome::simData
sumSome::simData
?sumSome::sumPvals
sumSome::sumPvals
diag(3)
quasar::simulateData
sumSome::simData
gamma <- rep(0,0)
gamma
length(gamma)
length(gamma)+1
p <- 1
Sigma <- diag(p)
Sigma
s <- 1
1[1]
s[1]
rep(1, 10)
rep(1, length.out10)
rep(1, length.out=10)
rep(c(1,2,3), length.out=10)
is.numeric(NULL)
is.numeric(1)
is.numeric(c(1,1))
rnorm(n=3, mean = c(0,0,0), sd = c(1,2,3))
rnorm(n=3, mean = c(0,0,0), sd = c(1,2))
rnorm(n=3, mean = c(0,0,0), sd = c(1,2,-1))
rnorm(n=3, mean = c(0,0,0), sd = c(1,2,0))
rnorm(n=3, mean = c(0,0,0), sd = c(1,2,0))
?rt
set.seed(0.1)
devtools::document()
\code{y = mu + beta * X + Z %*% gamma + error}.
devtools::document()
devtools::document()
?simulateData
devtools::document()
devtools::document()
?simulateData
devtools::document()
?simulateData
devtools::document()
?simulateData
devtools::document()
?simulateData
devtools::document()
?inherits
inherits(res, "rqs")
inherits(res, rqs)
inherits(res, "quasar")
inherits(res, "matrix")
class(res)
prova <- as.matrix(res)
prova
inherits(prova, "matrix")
inherits(prova, "quasar")
devtools::document()
?closedTesting
set.seed(123)
D <- simulateData(n = 100, gamma = 0, sigma.y = "2 * abs(X) + 1", distribution = "normal")
plot(D$X, D$y)
D <- simulateData(n = 100, gamma = 0, sigma.y = "1 + 2 * pmax(x, 0)", distribution = "normal")
D <- simulateData(n = 100, gamma = 0, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
plot(D$X, D$y)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
plot(D$X, D$y)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z, tau = tau)
mod <- rq(D$y ~ D$X + D$Z, tau = tau)
res <- quasar::closedTesting(mod, X = "X")
mod <- rq(D$y ~ D$X + D$Z1, tau = tau)
res <- quasar::closedTesting(mod, X = "X")
mod <- rq(D$y ~ D$X + as.vector(D$Z), tau = tau)
res <- quasar::closedTesting(mod, X = "X")
mod
D <- simulateData(n = 200, beta = 0.5, gamma = c(0.2,-0.1),
sigma.y = 0.5, distribution = "normal")
mod <- rq(D$y ~ D$X + D$Z1, tau = tau)
mod
res <- quasar::closedTesting(mod, X = "x")
y <- D$y
X <- D$X
Z <- D$Z1
is.vector(X)
is.vector(Z)
is.vector(Y)
is.vector(y)
mod <- rq(y ~ X + Z, tau = tau)
res <- quasar::closedTesting(mod, X = "X")
mod <- rq(y ~ X + Z1, tau = tau, data=D)
res <- quasar::closedTesting(mod, X = "X")
res
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
mod <- rq(y ~ x + z, tau = tau, data=D)
mod <- rq(y ~ X + Z, tau = tau, data=D)
res <- quasar::closedTesting(mod, X = "X")
res
D <- simulateData(n = 100, gamma = 0.5, sigma.y = 0, distribution = "normal")
D <- simulateData(n = 100, gamma = 0.5, sigma.y = 1, distribution = "normal")
mod <- rq(y ~ X + Z, tau = tau, data=D)
D
D <- simulateData(n = 100, beta=1, gamma = 0.5, sigma.y = 1, distribution = "normal")
mod <- rq(y ~ X + Z, tau = tau, data=D)
head(D)
D <- simulateData(n = 100, beta=1, gamma = 0.5, sigma.y = "1", distribution = "normal")
mod <- rq(y ~ X + Z, tau = tau, data=D)
head(D)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
head(D)
mod <- rq(y ~ X + Z1, tau = tau, data=D)
res <- quasar::closedTesting(mod, X = "X")
res
devtools::document()
?closedTesting
set.seed(123)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
plot(D$X, D$y)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
summary(mod)
res <- quasar::closedTesting(mod, X = "X")
res
summary(res)
plot(res)
set.seed(1234)
devtools::document()
?closedTesting
set.seed(123)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
plot(res)
set.seed(1234)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
plot(res)
set.seed(123)
D <- simulateData(n = 200, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
plot(res)
set.seed(123)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
set.seed(123)
D <- simulateData(n = 150, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
set.seed(123)
D <- simulateData(n = 200, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
set.seed(123)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 3 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
set.seed(123)
D <- simulateData(n = 200, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
plot(res)
plot(res, legend.position = "topleft")
plot(res, legend.position = "bottomright")
set.seed(123)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
set.seed(123)
D <- simulateData(n = 150, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
set.seed(1234)
D <- simulateData(n = 150, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
set.seed(1234)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)", distribution = "normal")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- quasar::closedTesting(mod, X = "X")
res
plot(res)
plot(res, legend.position = "bottomright")
summary(res, alpha = 0.1)
plot(res, alpha = 0.1, legend.position = "bottomright")
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# Heteroscedastic model: x increases variability, not the center
# So x affects upper quantiles but not the median
eps <- rnorm(n, mean = 0, sd = 1 + 2 * pmax(x, 0))
set.seed(123)
n <- 100
x <- rnorm(n)
z <- rnorm(n)
# Heteroscedastic model: x increases variability, not the center
# So x affects upper quantiles but not the median
eps <- rnorm(n, mean = 0, sd = 1 + 2 * pmax(x, 0))
y <- 0.5 * z + eps
plot(x,y)
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ x + z, tau = tau)
res <- quasar::closedTesting(mod, X = "x")
res
plot_quantile_coeff(res, legend.position = "top")
plot(D$X, D$y)
?rankTest
set.seed(1234)
D <- simulateData(n = 200, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)")
#Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
rankTest(mod, "X")
rankTest(mod, "X", full=TRUE)
rankTest(mod, "X", tau=c(0.1,0.9), full=TRUE)
rankTest(mod, "X", tau=c(0.1,0.9))
devtools::document()
?rankTest
set.seed(1234)
D <- simulateData(n = 200, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)")
#Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Rank test
rankTest(mod, X = "X")
waldTest(mod, "X")
?legend.position
devtools::document()
?closedTesting
# Simulate data
set.seed(1234)
D <- simulateData(n = 200, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- closedTesting(mod, X = "X")
res
summary(res, alpha = 0.1)
devtools::document()
?closedTesting
# Simulate data
set.seed(1234)
D <- simulateData(n = 100, gamma = 0.5, sigma.y = "1 + 2 * pmax(X, 0)")
# Quantile regressions at different levels
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- quantreg::rq(y ~ X + Z1, tau = tau, data=D)
# Closed testing
res <- closedTesting(mod, X = "X")
res
summary(res, alpha = 0.1)
plot(res, alpha = 0.1, legend.position = "bottomright")
?ARIbrain::cluster_threshold
?hommel
# ----------------------------------------------------
setwd("~/")
mask <- RNifti::readNifti("~/neurovault_2447/mask.nii.gz")
mask_v <- as.vector(mask)
subj <- RNifti::readNifti("~/neurovault_2447/tmap_01.nii.gz")
subj_v <- as.vector(subj)[mask_v==1]
hist(subj_v)
require(ARIbrain)
?ARIbrain::cluster_threshold
clstr <- cluster_threshold(subj > 3.2)
dim(clst)
dim(clstr)
table(clstr)
clstr <- cluster_threshold(subj > 4)
table(clstr)
clstr <- cluster_threshold(subj > 10)
table(clstr)
clstr <- cluster_threshold(subj > 5)
table(clstr)
