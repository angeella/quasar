pvWB5 = mean(pvWB5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05))
View(sim %>%
group_by(distributions, sigma.y, beta) %>%
summarize(pvC1 = mean(pvC1 <= 0.05),
pvC2 = mean(pvC2 <= 0.05),
pvC3 = mean(pvC3 <= 0.05),
pvC4 = mean(pvC4 <= 0.05),
pvC5 = mean(pvC5 <= 0.05),
pvWB1 = mean(pvWB1 <= 0.05),
pvWB2 = mean(pvWB2 <= 0.05),
pvWB3 = mean(pvWB3 <= 0.05),
pvWB4 = mean(pvWB4 <= 0.05),
pvWB5 = mean(pvWB5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05)))
R
R.version
load("C:/Users/Andreella/Documents/Projects/quantileMT/output/sim.RData")
library(tidyverse)
View(sim %>%
group_by(distributions, sigma.y, beta) %>%
summarize(pvC1 = mean(pvC1 <= 0.05),
pvC2 = mean(pvC2 <= 0.05),
pvC3 = mean(pvC3 <= 0.05),
pvC4 = mean(pvC4 <= 0.05),
pvC5 = mean(pvC5 <= 0.05),
pvWB1 = mean(pvWB1 <= 0.05),
pvWB2 = mean(pvWB2 <= 0.05),
pvWB3 = mean(pvWB3 <= 0.05),
pvWB4 = mean(pvWB4 <= 0.05),
pvWB5 = mean(pvWB5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05)))
nrow(sim)
nsim <- 1000
rho <- 0
p <- 2
nsim <- 1000
rho <- 0
p <- 2
Sigma <-  (1 - rho) * diag(p) + rho * matrix(1, p, p)
distributions <- c("normal")
sigma.y <- c("1")
beta <- c(0)
sim <- expand.grid(sim = seq(nsim),
distributions = distributions,
sigma.y = sigma.y,
beta = beta)
sim$pvC1 <- sim$pvC2 <- sim$pvC3 <- sim$pvC4 <- sim$pvC5 <-NA
sim$pvWB1 <- sim$pvWB2 <- sim$pvWB3 <- sim$pvWB4 <- sim$pvWB5 <-NA
sim$pvRB1 <- sim$pvRB2 <- sim$pvRB3 <- sim$pvRB4 <- sim$pvRB5 <-NA
i =1
dat <- simulateData(100,
beta=sim$beta[i],
gamma=c(0),
mu=5,
Sigma=Sigma,
sigma.y=as.character(sim$sigma.y[i]),
distribution=sim$distributions[i],
df = 4, seed = i)
dat
dat <- simulateData(1000,
beta=sim$beta[i],
gamma=c(0),
mu=0,
Sigma=Sigma,
sigma.y=as.character(sim$sigma.y[i]),
distribution=sim$distributions[i],
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1 + Z2, tau = tau, data = dat)
for(i in seq(nrow(sim))){
dat <- simulateData(1000,
beta=sim$beta[i],
gamma=c(0),
mu=0,
Sigma=Sigma,
sigma.y=as.character(sim$sigma.y[i]),
distribution=sim$distributions[i],
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1, tau = tau, data = dat)
out <- closedTesting(mod, X = "X", test = "rank-score")
sim[i, c("pvC1", "pvC2", "pvC3", "pvC4", "pvC5")] <- out$p.value.adjusted
out <- waldTest(mod, X = "X")
sim[i, c("pvWB1", "pvWB2", "pvWB3", "pvWB4", "pvWB5")] <-  p.adjust(out$p.value, method = "holm")
out <- rankTest(mod, X = "X")
sim[i, c("pvRB1", "pvRB2", "pvRB3", "pvRB4", "pvRB5")] <-  p.adjust(out$p.value, method = "holm")
}
for(i in seq(nrow(sim))){
dat <- simulateData(100,
beta=sim$beta[i],
gamma=c(0),
mu=0,
Sigma=Sigma,
sigma.y=as.character(sim$sigma.y[i]),
distribution=sim$distributions[i],
df = 4, seed = i)
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ X + Z1, tau = tau, data = dat)
out <- closedTesting(mod, X = "X", test = "rank-score")
sim[i, c("pvC1", "pvC2", "pvC3", "pvC4", "pvC5")] <- out$p.value.adjusted
out <- waldTest(mod, X = "X")
sim[i, c("pvWB1", "pvWB2", "pvWB3", "pvWB4", "pvWB5")] <-  p.adjust(out$p.value, method = "holm")
out <- rankTest(mod, X = "X")
sim[i, c("pvRB1", "pvRB2", "pvRB3", "pvRB4", "pvRB5")] <-  p.adjust(out$p.value, method = "holm")
}
r41sqrt10::summaryResSim(matrix(sim$pvC1))
r41sqrt10::summaryResSim(matrix(sim$pvC2))
r41sqrt10::summaryResSim(matrix(sim$pvC3))
r41sqrt10::summaryResSim(matrix(sim$pvC4))
r41sqrt10::summaryResSim(matrix(sim$pvC5))
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
for(i in seq(nrow(sim))){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
sim[i, c("pvC1", "pvC2", "pvC3", "pvC4", "pvC5")] <- out$p.value.adjusted
out <- waldTest(mod, X = "X")
sim[i, c("pvWB1", "pvWB2", "pvWB3", "pvWB4", "pvWB5")] <-  p.adjust(out$p.value, method = "holm")
out <- rankTest(mod, X = "X")
sim[i, c("pvRB1", "pvRB2", "pvRB3", "pvRB4", "pvRB5")] <-  p.adjust(out$p.value, method = "holm")
}
for(i in seq(nrow(sim))){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
sim[i, c("pvC1", "pvC2", "pvC3", "pvC4", "pvC5")] <- out$p.value.adjusted
out <- waldTest(mod, X = "x")
sim[i, c("pvWB1", "pvWB2", "pvWB3", "pvWB4", "pvWB5")] <-  p.adjust(out$p.value, method = "holm")
out <- rankTest(mod, X = "x")
sim[i, c("pvRB1", "pvRB2", "pvRB3", "pvRB4", "pvRB5")] <-  p.adjust(out$p.value, method = "holm")
}
r41sqrt10::summaryResSim(matrix(sim$pvC1))
r41sqrt10::summaryResSim(matrix(sim$pvC2))
r41sqrt10::summaryResSim(matrix(sim$pvC3))
r41sqrt10::summaryResSim(matrix(sim$pvC4))
r41sqrt10::summaryResSim(matrix(sim$pvC5))
r41sqrt10::summaryResSim(matrix(sim$pvRB1))
r41sqrt10::summaryResSim(matrix(sim$pvC1))
r41sqrt10::summaryResSim(matrix(sim$pvC2))
r41sqrt10::summaryResSim(matrix(sim$pvC3))
r41sqrt10::summaryResSim(matrix(sim$pvC4))
r41sqrt10::summaryResSim(matrix(sim$pvC5))
r41sqrt10::summaryResSim(matrix(sim$pvWB5))
r41sqrt10::summaryResSim(matrix(sim$pvWB1))
r41sqrt10::summaryResSim(matrix(sim$pvWB2))
r41sqrt10::summaryResSim(matrix(sim$pvWB3))
r41sqrt10::summaryResSim(matrix(sim$pvWB4))
r41sqrt10::summaryResSim(matrix(sim$pvWB5))
out
load("C:/Users/Andreella/Documents/Projects/quantileMT/output/sim.RData")
library(tidyverse)
View(sim %>%
group_by(distributions, sigma.y, beta) %>%
summarize(pvC1 = mean(pvC1 <= 0.05),
pvC2 = mean(pvC2 <= 0.05),
pvC3 = mean(pvC3 <= 0.05),
pvC4 = mean(pvC4 <= 0.05),
pvC5 = mean(pvC5 <= 0.05),
pvWB1 = mean(pvWB1 <= 0.05),
pvWB2 = mean(pvWB2 <= 0.05),
pvWB3 = mean(pvWB3 <= 0.05),
pvWB4 = mean(pvWB4 <= 0.05),
pvWB5 = mean(pvWB5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05)))
taus <- mod$tau
taus
tests<-unlist(lapply(1:length(taus),
combn,
x = taus,
simplify = FALSE),
recursive = FALSE)
tests
unlist(tests[[1]])
unlist(tests[[2]])
unlist(tests[[6]])
res <- estimateCovariance(mod = mod, X = "x", test = "rank", h = NULL, alpha = 0.05)
res$S
mod$tau
which(taus %in% unlist(tests[[1]]))
which(taus %in% unlist(tests[[2]]))
which(taus %in% unlist(tests[[6]]))
dim(res$M)
.Machine$double.eps
.Machine$double.eps^(1/2)
for(i in seq(nrow(sim))){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.25, 0.5, 0.75, 0.9)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
sim[i, c("pvC1", "pvC2", "pvC3", "pvC4", "pvC5")] <- out$p.value.adjusted
out <- waldTest(mod, X = "x")
sim[i, c("pvWB1", "pvWB2", "pvWB3", "pvWB4", "pvWB5")] <-  p.adjust(out$p.value, method = "holm")
out <- rankTest(mod, X = "x")
sim[i, c("pvRB1", "pvRB2", "pvRB3", "pvRB4", "pvRB5")] <-  p.adjust(out$p.value, method = "holm")
}
r41sqrt10::summaryResSim(matrix(sim$pvRB1))
r41sqrt10::summaryResSim(matrix(sim$pvRB2))
r41sqrt10::summaryResSim(matrix(sim$pvRB3))
r41sqrt10::summaryResSim(matrix(sim$pvRB4))
r41sqrt10::summaryResSim(matrix(sim$pvRB5))
r41sqrt10::summaryResSim(matrix(sim$pvC1))
r41sqrt10::summaryResSim(matrix(sim$pvC2))
r41sqrt10::summaryResSim(matrix(sim$pvC3))
r41sqrt10::summaryResSim(matrix(sim$pvC4))
out <- closedTesting(mod, X = "x", test = "rank-score")
res <- c()
for(i in seq(nrow(sim))){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
res[i] <-out$p.value.adjusted
}
res <- c()
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
res[i] <-out$p.value.adjusted
}
res
mean(res <= 0.05)
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1,0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
res[i] <-out$p.value.adjusted[2]
}
mean(res <= 0.05)
res <- c()
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1,0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
res[i] <-out$p.value.adjusted[2]
}
mean(res <= 0.05)
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1,0.25, 0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
res[i] <-out$p.value.adjusted[2]
}
mean(res <= 0.05)
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.25, 0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x", test = "rank-score")
res[i] <-out$p.value.adjusted[3]
}
mean(res <= 0.05)
out <- rankTest(mod, X = "x")
out
res1 <- res2 <- res3 <-c()
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.25, 0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- rankTest(mod, X = "x")
res1[i] <-out$p.value[1]
res2[i] <-out$p.value[2]
res3[i] <-out$p.value[3]
}
mean(res <= 0.05)
mean(res1 <= 0.05)
mean(res2 <= 0.05)
mean(res3 <= 0.05)
out <- closedTesting(mod, X = "x")
out
res1 <- res2 <- res3 <-c()
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.25, 0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x")
res1[i] <-out$p.value.adjusted[1]
res2[i] <-out$p.value.adjusted[2]
res3[i] <-out$p.value.adjusted[3]
}
mean(res3 <= 0.05)
mean(res2 <= 0.05)
mean(res1 <= 0.05)
r41sqrt10::summaryResSim(res1)
r41sqrt10::summaryResSim(matrix(res1))
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x")
res1[i] <-out$p.value.adjusted[1]
#  res2[i] <-out$p.value.adjusted[2]
#  res3[i] <-out$p.value.adjusted[3]
}
mean(res1 <= 0.05)
res1 <- res2 <- res3 <-c()
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x")
res1[i] <-out$p.value.adjusted[1]
#  res2[i] <-out$p.value.adjusted[2]
#  res3[i] <-out$p.value.adjusted[3]
}
mean(res1 <= 0.05)
tau = c(0.1, 0.5)
parse_set <- function(s) {
s <- gsub("[()\\s]", "", as.character(s))
as.numeric(strsplit(s, ",")[[1]])
}
res <- rankTest(mod = mod, X = "x", tau = tau)
mod <- rq(y ~ x + z, tau = tau, data = dat)
res <- rankTest(mod = mod, X = "x", tau = tau)
res
out <- data.frame(p.value.adjusted = NA,
quantiles.set = NA)
quantiles_single <- as.character(mod$tau)
quantiles_single
seq(length(quantiles_single))
i = 1
idx <- vapply(res$Quantiles.Set, function(s) {
vals <- parse_set(s)
all(quantiles_single[i] %in% vals)
}, logical(1))
idx
res[idx, ]
res <- rankTest(mod = mod, X = "x", tau = tau, full = TRUE)
res_sub <- res[idx, ]
res_sub
idx
idx <- vapply(res$Quantiles.Set, function(s) {
vals <- parse_set(s)
all(quantiles_single[i] %in% vals)
}, logical(1))
idx
res_sub <- res[idx, ]
res_sub
max(res_sub$p.value)
out <- rankTest(mod, X = "x")
out
res1 <- res2 <- res3 <-c()
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- rankTest(mod, X = "x")
res1[i] <-out$p.value[1]
#  res2[i] <-out$p.value.adjusted[2]
#  res3[i] <-out$p.value.adjusted[3]
}
mean(res1 <= 0.05)
mean(res2 <= 0.05)
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.5)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- rankTest(mod, X = "x")
res1[i] <-out$p.value[1]
res2[i] <-out$p.value[2]
#  res3[i] <-out$p.value.adjusted[3]
}
mean(res1 <= 0.05)
mean(res2 <= 0.05)
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(y = rnorm(100),
x = rnorm(100),
z = rnorm(100))
tau=c(0.1, 0.5, 0.9)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- rankTest(mod, X = "x")
res1[i] <-out$p.value[1]
res2[i] <-out$p.value[2]
res3[i] <-out$p.value[3]
}
mean(res1 <= 0.05)
mean(res2 <= 0.05)
mean(res3 <= 0.05)
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(x = rnorm(100),
z = rnorm(100))
dat$y <- 2*dat$z + rnorm(100)
tau=c(0.1, 0.5, 0.9)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- rankTest(mod, X = "x")
res1[i] <-out$p.value[1] #no corretti
res2[i] <-out$p.value[2]
res3[i] <-out$p.value[3]
}
mean(res1 <= 0.05)
mean(res2 <= 0.05)
mean(res3 <= 0.05)
out <- closedTesting(mod, X = "x")
for(i in seq(1000)){
set.seed(i)
dat <- data.frame(x = rnorm(100),
z = rnorm(100))
dat$y <- 2*dat$z + rnorm(100)
tau=c(0.1, 0.5, 0.9)
mod <- rq(y ~ x + z, tau = tau, data = dat)
out <- closedTesting(mod, X = "x")
res1[i] <-out$p.value.adjusted[1] #no corretti
res2[i] <-out$p.value.adjusted[2]
res3[i] <-out$p.value.adjusted[3]
}
mean(res1 <= 0.05)
mean(res2 <= 0.05)
mean(res3 <= 0.05)
load("C:/Users/Andreella/Documents/Projects/quantileMT/output/sim.RData")
library(tidyverse)
View(sim %>%
group_by(distributions, sigma.y, beta) %>%
summarize(pvC1 = mean(pvC1 <= 0.05),
pvC2 = mean(pvC2 <= 0.05),
pvC3 = mean(pvC3 <= 0.05),
pvC4 = mean(pvC4 <= 0.05),
pvC5 = mean(pvC5 <= 0.05),
pvWB1 = mean(pvWB1 <= 0.05),
pvWB2 = mean(pvWB2 <= 0.05),
pvWB3 = mean(pvWB3 <= 0.05),
pvWB4 = mean(pvWB4 <= 0.05),
pvWB5 = mean(pvWB5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05)))
View(sim %>%
group_by(distributions, sigma.y, beta) %>%
summarize(pvC1 = mean(pvC1 <= 0.05),
pvC2 = mean(pvC2 <= 0.05),
pvC3 = mean(pvC3 <= 0.05),
pvC4 = mean(pvC4 <= 0.05),
pvC5 = mean(pvC5 <= 0.05),
pvRB1 = mean(pvRB1 <= 0.05),
pvRB2 = mean(pvRB2 <= 0.05),
pvRB3 = mean(pvRB3 <= 0.05),
pvRB4 = mean(pvRB4 <= 0.05),
pvRB5 = mean(pvRB5 <= 0.05)))
